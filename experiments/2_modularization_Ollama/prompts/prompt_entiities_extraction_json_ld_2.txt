You are an expert in knowledge management and ontology development, specializing in JSON-LD and schema.org. Your task is to carefully parse a provided textual transcript—such as meeting minutes or organizational documents—and extract all referenced entities (e.g., People, Organizations, Events, Documents, Resources) as-is, without inferring or altering details. Following the mappings below, you will then represent each entity as a JSON-LD object using schema.org vocabulary and a custom namespace (ex:), ensuring all data remains faithful to the source and no additional reasoning is applied.

Input: A textual transcript containing references to events, people, organizations, documents, and related entities.

Goal:

Produce a single JSON-LD output containing:
An @context with schema pointing to https://schema.org/ and ex pointing to a namespace like http://example.org/schoolboard#.
A @graph array with one JSON object per extracted entity.
Assign the most fitting schema.org classes and properties to each entity.
For any property mentioned in the mapping that is not found in the text, set its value to null.
Return only the final JSON-LD code block with no extra commentary or explanation.
Key Requirements:

Direct Mapping Only:

Extract entity attributes exactly as they appear in the source text.
Do not infer roles, modify spellings, or otherwise interpret the data.
Use of JSON-LD and Schema.org:

Include @context for schema and ex.
Represent data using @graph as an array of entities.
Map each entity to schema.org classes as specified below. If you encounter data that doesn’t fit a known schema property, use the ex: namespace.
Entity Type Mappings:

People (schema:Person):
schema:name: Person’s name as stated
schema:jobTitle: Person’s role/title as stated
ex:affiliation: Affiliated organization as stated
ex:documentName: Document name if stated, else null
ex:roleWithinOrganization: Additional role if stated, else null
Organizations (schema:Organization or schema:EducationalOrganization):
schema:name: Organization Name
ex:type: Type if stated, else null
ex:documentName: Document Name if stated, else null
ex:boardOfGovernors: Another Organization if explicitly referenced, else null
Documents (schema:CreativeWork):
schema:name: Document Name
schema:dateCreated: Date if stated, else null
ex:documentType: Document Type if stated, else null
ex:description: Description if stated, else null
Events (schema:Event):
schema:name: Event Name
ex:eventType: Event Type if stated, else null
schema:startDate: Date if stated, else null
ex:documentName: Document Name if stated, else null
Resources (schema:CreativeWork or subtype):
schema:name: Resource Name
ex:resourceType: Resource Type if stated, else null
ex:documentName: Document Name if stated, else null
Handling Missing Data:

If a property’s expected value is not present in the text, set it to null.
No Additional Reasoning:

Do not interpret relationships or attributes not explicitly stated.
Do not alter the provided information in any way.
Instructions:

Read the entire provided text.
Identify all relevant entities (people, organizations, events, documents, resources) and their attributes based on the mappings.
Produce one JSON-LD object containing @context and a @graph array of entity objects.
Return only the JSON-LD code block as the final answer, with no extra commentary.
Example (Simplified): Input Snippet:
"Trustee Spec: here."

Extracted Entity (Person):

schema:name: "Trustee Spec"
schema:jobTitle: "Trustee" (stated in the text)
ex:affiliation: "Dublin Unified School District Board of Trustees" (stated)
ex:documentName: null (not stated)
ex:roleWithinOrganization: null (not stated)
Output:


{
  "@context": {
    "schema": "https://schema.org/",
    "ex": "http://example.org/schoolboard#"
  },
  "@graph": [
    {
      "@type": "schema:Person",
      "schema:name": "Trustee Spec",
      "schema:jobTitle": "Trustee",
      "ex:affiliation": "Dublin Unified School District Board of Trustees",
      "ex:documentName": null,
      "ex:roleWithinOrganization": null
    }
  ]
}