You are an expert in knowledge management and ontology development, specializing in JSON-LD and schema.org. Your task is to parse a provided text (e.g., meeting minutes, organizational documents) and extract entities—such as People, Organizations, Events, Documents, and Resources—according to specified schema mappings. Then, represent them as JSON-LD objects in a single output document.

Input:
A textual transcript containing references to events, people, organizations, documents, and related entities.

Goal:
Produce a single JSON-LD output containing:

An @context with schema pointing to https://schema.org/ and ex pointing to a custom namespace like http://example.org/schoolboard#.
A @graph array of JSON-LD objects, each representing an extracted entity and mapped to appropriate schema.org classes and properties, with extensions where needed.
Key Requirements:

Direct Mapping Only:

Extract entities and attributes exactly as they appear.
Do not infer, normalize, or correct data.
Use null if a property is mentioned in the mapping but is not found in the text.
JSON-LD and Schema.org Usage:

Include @context with schema and ex.

Use @graph as an array of entities.

Map each entity type to schema.org classes and properties as follows:

People (schema:Person):

schema:name => Person’s name as stated in the text
schema:jobTitle => Person’s role/title as stated
ex:affiliation => Affiliated organization as stated
ex:documentName => Document name if stated, else null
ex:roleWithinOrganization => Additional role if stated, else null
Organizations (schema:Organization or schema:EducationalOrganization):

schema:name => Organization Name
ex:type => Type if stated, else null
ex:documentName => Document Name if stated, else null
ex:boardOfGovernors => Another organization if explicitly referenced, else null
Documents (schema:CreativeWork):

schema:name => Document name
schema:dateCreated => Date as stated
ex:documentType => Document type if stated
ex:description => Description if stated, else null
Events (schema:Event):

schema:name => Event name
ex:eventType => Event type if stated
schema:startDate => Date as stated
ex:documentName => Document name if stated, else null
Resources (schema:CreativeWork or subtype):

schema:name => Resource name
ex:resourceType => Resource type if stated
ex:documentName => Document name if stated, else null
Handling Missing Data:

If an expected property is not present, set it to null.
No Additional Reasoning:

Do not infer relationships or additional context not explicitly stated.
Do not alter spelling or formatting.
Instructions:

Read the entire provided text.
Identify and extract all relevant entities with their attributes according to the mappings.
Produce a single JSON-LD object containing @context and @graph.
Include one JSON object per identified entity, using @type and the specified properties.
The final answer should be the JSON-LD output only, with no extra commentary.
Example 1 (Simplified):
Input Snippet:
"Trustee Spec: here."

Extracted Entity (Person):

schema:name: "Trustee Spec"
schema:jobTitle: "Trustee" (stated in text)
ex:affiliation: "Dublin Unified School District Board of Trustees"
ex:documentName: null (not stated)
ex:roleWithinOrganization: null (not stated)
Output:


{
  "@context": {
    "schema": "https://schema.org/",
    "ex": "http://example.org/schoolboard#"
  },
  "@graph": [
    {
      "@type": "schema:Person",
      "schema:name": "Trustee Spec",
      "schema:jobTitle": "Trustee",
      "ex:affiliation": "Dublin Unified School District Board of Trustees",
      "ex:documentName": null,
      "ex:roleWithinOrganization": null
    }
  ]
}
Example 2 (Using the Provided Text):
Input Snippet:
"Tuesday, September 10, 2024
Regular Meeting of the Board of Trustees
Dublin Unified School District
7471 Larkdale Avenue, Dublin, CA
District Office Board Room
Open Session - 6:00 p.m."

Extracted Entity (Event):

@type: schema:Event
schema:name: "Regular Meeting of the Board of Trustees"
ex:eventType: null (not explicitly stated as a type, just “Regular Meeting”)
schema:startDate: "Tuesday, September 10, 2024 6:00 p.m." (as stated)
ex:documentName: null (not stated)
Output Example:


{
  "@type": "schema:Event",
  "schema:name": "Regular Meeting of the Board of Trustees",
  "ex:eventType": null,
  "schema:startDate": "Tuesday, September 10, 2024 6:00 p.m.",
  "ex:documentName": null
}
Example 3 (Using the Provided Text):
Input Snippet:
"File Attachments
Maintenance 2024 Presentation, final.pdf (23,133 KB)"

Extracted Entity (Document):

@type: schema:CreativeWork (a presentation is a type of creative work)
schema:name: "Maintenance 2024 Presentation, final.pdf"
schema:dateCreated: null (date not stated)
ex:documentType: "PDF" (from filename extension if stated as allowed; if inference not allowed, leave as null)
ex:description: null (no description provided)
(Note: The prompt says do not infer or normalize. The word "PDF" appears directly in the text as part of the filename. We will consider the file type as stated in the filename. If unsure, we can set ex:documentType to null.)

Output Example:


{
  "@type": "schema:CreativeWork",
  "schema:name": "Maintenance 2024 Presentation, final.pdf",
  "schema:dateCreated": null,
  "ex:documentType": null,
  "ex:description": null
}
